package redis.clients.jedis;

import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;
import redis.clients.jedis.commands.ProtocolCommand;
import redis.clients.jedis.util.SafeEncoder;

/**
 * Static implementation of CommandFlagsRegistry. This class is auto-generated by
 * CommandFlagsRegistryGenerator. DO NOT EDIT MANUALLY.
 * <p>
 * Generated from Redis Server:
 * <ul>
 * <li>Version: 8.2.2</li>
 * <li>Mode: standalone</li>
 * <li>Loaded Modules: timeseries, ReJSON, bf, vectorset, search</li>
 * <li>Generated at: 2025-10-24 17:15:43 CEST</li>
 * </ul>
 */
public class StaticCommandFlagsRegistry implements CommandFlagsRegistry {

  // Empty flags constant for commands with no flags
  private static final EnumSet<CommandFlag> EMPTY_FLAGS = EnumSet.noneOf(CommandFlag.class);

  // Command flags registry - maps command names to their flags
  // Command names are stored in uppercase with original spacing/dots
  // (e.g., GET, FT.SEARCH, FUNCTION DELETE)
  // Registry uses shared EnumSet instances to minimize memory usage
  private static final Map<String, EnumSet<CommandFlag>> COMMAND_FLAGS_REGISTRY = new HashMap<>();

  static {
    // 4 command(s) with: no flags
    COMMAND_FLAGS_REGISTRY.put("MEMORY DOCTOR", EMPTY_FLAGS);
    COMMAND_FLAGS_REGISTRY.put("MEMORY MALLOC-STATS", EMPTY_FLAGS);
    COMMAND_FLAGS_REGISTRY.put("MEMORY PURGE", EMPTY_FLAGS);
    COMMAND_FLAGS_REGISTRY.put("MEMORY STATS", EMPTY_FLAGS);

    // 1 command(s) with: admin
    COMMAND_FLAGS_REGISTRY.put("PFSELFTEST", EnumSet.of(CommandFlag.ADMIN));

    // 2 command(s) with: blocking
    COMMAND_FLAGS_REGISTRY.put("WAIT", EnumSet.of(CommandFlag.BLOCKING));
    COMMAND_FLAGS_REGISTRY.put("WAITAOF", EnumSet.of(CommandFlag.BLOCKING));

    // 2 command(s) with: fast
    COMMAND_FLAGS_REGISTRY.put("ASKING", EnumSet.of(CommandFlag.FAST));
    COMMAND_FLAGS_REGISTRY.put("PING", EnumSet.of(CommandFlag.FAST));

    // 5 command(s) with: noscript
    COMMAND_FLAGS_REGISTRY.put("FUNCTION DUMP", EnumSet.of(CommandFlag.NOSCRIPT));
    COMMAND_FLAGS_REGISTRY.put("FUNCTION LIST", EnumSet.of(CommandFlag.NOSCRIPT));
    COMMAND_FLAGS_REGISTRY.put("SCRIPT DEBUG", EnumSet.of(CommandFlag.NOSCRIPT));
    COMMAND_FLAGS_REGISTRY.put("SCRIPT EXISTS", EnumSet.of(CommandFlag.NOSCRIPT));
    COMMAND_FLAGS_REGISTRY.put("SCRIPT FLUSH", EnumSet.of(CommandFlag.NOSCRIPT));

    // 49 command(s) with: readonly
    COMMAND_FLAGS_REGISTRY.put("BITCOUNT", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("BITPOS", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("DUMP", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("GEODIST", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("GEOHASH", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("GEOPOS", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("GEORADIUSBYMEMBER_RO", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("GEORADIUS_RO", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("GEOSEARCH", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("GETRANGE", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("HGETALL", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("HKEYS", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("HRANDFIELD", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("HSCAN", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("HVALS", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("KEYS", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("LCS", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("LINDEX", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("LPOS", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("LRANGE", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("MEMORY USAGE", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("OBJECT ENCODING", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("OBJECT FREQ", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("OBJECT IDLETIME", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("OBJECT REFCOUNT", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("PFCOUNT", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("RANDOMKEY", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("SCAN", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("SDIFF", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("SINTER", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("SMEMBERS", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("SRANDMEMBER", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("SSCAN", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("SUBSTR", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("SUNION", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("XINFO CONSUMERS", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("XINFO GROUPS", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("XINFO STREAM", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("XPENDING", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("XRANGE", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("XREVRANGE", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("ZRANDMEMBER", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("ZRANGE", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("ZRANGEBYLEX", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("ZRANGEBYSCORE", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("ZREVRANGE", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("ZREVRANGEBYLEX", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("ZREVRANGEBYSCORE", EnumSet.of(CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("ZSCAN", EnumSet.of(CommandFlag.READONLY));

    // 8 command(s) with: stale
    COMMAND_FLAGS_REGISTRY.put("CLUSTER COUNTKEYSINSLOT", EnumSet.of(CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLUSTER GETKEYSINSLOT", EnumSet.of(CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLUSTER INFO", EnumSet.of(CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLUSTER KEYSLOT", EnumSet.of(CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLUSTER LINKS", EnumSet.of(CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLUSTER MYID", EnumSet.of(CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLUSTER MYSHARDID", EnumSet.of(CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLUSTER NODES", EnumSet.of(CommandFlag.STALE));

    // 13 command(s) with: write
    COMMAND_FLAGS_REGISTRY.put("DEL", EnumSet.of(CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("FLUSHALL", EnumSet.of(CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("FLUSHDB", EnumSet.of(CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("LREM", EnumSet.of(CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("LTRIM", EnumSet.of(CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("RENAME", EnumSet.of(CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("XGROUP DELCONSUMER", EnumSet.of(CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("XGROUP DESTROY", EnumSet.of(CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("XGROUP SETID", EnumSet.of(CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("XTRIM", EnumSet.of(CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("ZREMRANGEBYLEX", EnumSet.of(CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("ZREMRANGEBYRANK", EnumSet.of(CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("ZREMRANGEBYSCORE", EnumSet.of(CommandFlag.WRITE));

    // 1 command(s) with: admin, noscript
    COMMAND_FLAGS_REGISTRY.put("MODULE LIST", EnumSet.of(CommandFlag.ADMIN, CommandFlag.NOSCRIPT));

    // 3 command(s) with: admin, stale
    COMMAND_FLAGS_REGISTRY.put("CLUSTER COUNT-FAILURE-REPORTS",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLUSTER REPLICAS",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLUSTER SLAVES", EnumSet.of(CommandFlag.ADMIN, CommandFlag.STALE));

    // 3 command(s) with: allow_busy, noscript
    COMMAND_FLAGS_REGISTRY.put("FUNCTION KILL",
      EnumSet.of(CommandFlag.ALLOW_BUSY, CommandFlag.NOSCRIPT));
    COMMAND_FLAGS_REGISTRY.put("FUNCTION STATS",
      EnumSet.of(CommandFlag.ALLOW_BUSY, CommandFlag.NOSCRIPT));
    COMMAND_FLAGS_REGISTRY.put("SCRIPT KILL",
      EnumSet.of(CommandFlag.ALLOW_BUSY, CommandFlag.NOSCRIPT));

    // 2 command(s) with: blocking, write
    COMMAND_FLAGS_REGISTRY.put("BLPOP", EnumSet.of(CommandFlag.BLOCKING, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("BRPOP", EnumSet.of(CommandFlag.BLOCKING, CommandFlag.WRITE));

    // 24 command(s) with: denyoom, write
    COMMAND_FLAGS_REGISTRY.put("BITFIELD", EnumSet.of(CommandFlag.DENYOOM, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("BITOP", EnumSet.of(CommandFlag.DENYOOM, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("COPY", EnumSet.of(CommandFlag.DENYOOM, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("GEOADD", EnumSet.of(CommandFlag.DENYOOM, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("GEOSEARCHSTORE",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("LINSERT", EnumSet.of(CommandFlag.DENYOOM, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("LMOVE", EnumSet.of(CommandFlag.DENYOOM, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("LSET", EnumSet.of(CommandFlag.DENYOOM, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("MSET", EnumSet.of(CommandFlag.DENYOOM, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("MSETNX", EnumSet.of(CommandFlag.DENYOOM, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("PFMERGE", EnumSet.of(CommandFlag.DENYOOM, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("PSETEX", EnumSet.of(CommandFlag.DENYOOM, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("RESTORE", EnumSet.of(CommandFlag.DENYOOM, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("RPOPLPUSH", EnumSet.of(CommandFlag.DENYOOM, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("SDIFFSTORE", EnumSet.of(CommandFlag.DENYOOM, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("SET", EnumSet.of(CommandFlag.DENYOOM, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("SETBIT", EnumSet.of(CommandFlag.DENYOOM, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("SETEX", EnumSet.of(CommandFlag.DENYOOM, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("SETRANGE", EnumSet.of(CommandFlag.DENYOOM, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("SINTERSTORE", EnumSet.of(CommandFlag.DENYOOM, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("SUNIONSTORE", EnumSet.of(CommandFlag.DENYOOM, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("XGROUP CREATE", EnumSet.of(CommandFlag.DENYOOM, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("XGROUP CREATECONSUMER",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("ZRANGESTORE", EnumSet.of(CommandFlag.DENYOOM, CommandFlag.WRITE));

    // 35 command(s) with: fast, readonly
    COMMAND_FLAGS_REGISTRY.put("BITFIELD_RO", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("DBSIZE", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("EXISTS", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("EXPIRETIME", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("GET", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("GETBIT", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("HEXISTS", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("HEXPIRETIME", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("HGET", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("HLEN", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("HMGET", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("HPEXPIRETIME", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("HPTTL", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("HSTRLEN", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("HTTL", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("LLEN", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("LOLWUT", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("MGET", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("PEXPIRETIME", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("PTTL", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("SCARD", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("SISMEMBER", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("SMISMEMBER", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("STRLEN", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("TOUCH", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("TTL", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("TYPE", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("XLEN", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("ZCARD", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("ZCOUNT", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("ZLEXCOUNT", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("ZMSCORE", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("ZRANK", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("ZREVRANK", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("ZSCORE", EnumSet.of(CommandFlag.FAST, CommandFlag.READONLY));

    // 33 command(s) with: fast, write
    COMMAND_FLAGS_REGISTRY.put("EXPIRE", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("EXPIREAT", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("GETDEL", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("GETEX", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("HDEL", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("HEXPIRE", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("HEXPIREAT", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("HGETDEL", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("HGETEX", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("HPERSIST", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("HPEXPIRE", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("HPEXPIREAT", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("LPOP", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("MOVE", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("PERSIST", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("PEXPIRE", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("PEXPIREAT", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("RENAMENX", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("RPOP", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("SMOVE", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("SPOP", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("SREM", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("SWAPDB", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("UNLINK", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("XACK", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("XACKDEL", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("XAUTOCLAIM", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("XCLAIM", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("XDEL", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("XDELEX", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("ZPOPMAX", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("ZPOPMIN", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("ZREM", EnumSet.of(CommandFlag.FAST, CommandFlag.WRITE));

    // 10 command(s) with: loading, stale
    COMMAND_FLAGS_REGISTRY.put("CLUSTER SHARDS",
      EnumSet.of(CommandFlag.LOADING, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLUSTER SLOT-STATS",
      EnumSet.of(CommandFlag.LOADING, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLUSTER SLOTS", EnumSet.of(CommandFlag.LOADING, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("COMMAND COUNT", EnumSet.of(CommandFlag.LOADING, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("COMMAND DOCS", EnumSet.of(CommandFlag.LOADING, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("COMMAND GETKEYS",
      EnumSet.of(CommandFlag.LOADING, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("COMMAND GETKEYSANDFLAGS",
      EnumSet.of(CommandFlag.LOADING, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("COMMAND INFO", EnumSet.of(CommandFlag.LOADING, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("COMMAND LIST", EnumSet.of(CommandFlag.LOADING, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("INFO", EnumSet.of(CommandFlag.LOADING, CommandFlag.STALE));

    // 55 command(s) with: module, readonly
    COMMAND_FLAGS_REGISTRY.put("CMS.INFO", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("CMS.QUERY", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("FT.AGGREGATE",
      EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("FT.CONFIG", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("FT.CURSOR", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("FT.DICTDUMP", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("FT.EXPLAIN", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("FT.EXPLAINCLI",
      EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("FT.GET", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("FT.INFO", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("FT.MGET", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("FT.PROFILE", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("FT.SEARCH", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("FT.SPELLCHECK",
      EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("FT.SUGGET", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("FT.SUGLEN", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("FT.SYNDUMP", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("FT.TAGVALS", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("FT._LIST", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("JSON.ARRINDEX",
      EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("JSON.ARRLEN", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("JSON.DEBUG", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("JSON.GET", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("JSON.MGET", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("JSON.OBJKEYS",
      EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("JSON.OBJLEN", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("JSON.RESP", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("JSON.STRLEN", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("JSON.TYPE", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("TDIGEST.BYRANK",
      EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("TDIGEST.BYREVRANK",
      EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("TDIGEST.CDF", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("TDIGEST.INFO",
      EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("TDIGEST.MAX", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("TDIGEST.MIN", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("TDIGEST.QUANTILE",
      EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("TDIGEST.RANK",
      EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("TDIGEST.REVRANK",
      EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("TDIGEST.TRIMMED_MEAN",
      EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("TOPK.COUNT", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("TOPK.INFO", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("TOPK.LIST", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("TOPK.QUERY", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("TS.GET", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("TS.INFO", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("TS.MGET", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("TS.MRANGE", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("TS.MREVRANGE",
      EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("TS.QUERYINDEX",
      EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("TS.RANGE", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("TS.REVRANGE", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("VISMEMBER", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("VRANDMEMBER", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("VSIM", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("_FT.CONFIG", EnumSet.of(CommandFlag.MODULE, CommandFlag.READONLY));

    // 20 command(s) with: module, write
    COMMAND_FLAGS_REGISTRY.put("FT.ALIASDEL", EnumSet.of(CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("FT.DEL", EnumSet.of(CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("FT.DICTDEL", EnumSet.of(CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("FT.DROP", EnumSet.of(CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("FT.DROPINDEX", EnumSet.of(CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("FT.SUGDEL", EnumSet.of(CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("FT._ALIASDELIFX",
      EnumSet.of(CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("FT._DROPIFX", EnumSet.of(CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("FT._DROPINDEXIFX",
      EnumSet.of(CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("JSON.ARRPOP", EnumSet.of(CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("JSON.ARRTRIM", EnumSet.of(CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("JSON.CLEAR", EnumSet.of(CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("JSON.DEL", EnumSet.of(CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("JSON.FORGET", EnumSet.of(CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("JSON.NUMINCRBY", EnumSet.of(CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("JSON.NUMMULTBY", EnumSet.of(CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("JSON.NUMPOWBY", EnumSet.of(CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("TS.DEL", EnumSet.of(CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("TS.DELETERULE", EnumSet.of(CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("VREM", EnumSet.of(CommandFlag.MODULE, CommandFlag.WRITE));

    // 6 command(s) with: movablekeys, readonly
    COMMAND_FLAGS_REGISTRY.put("SINTERCARD",
      EnumSet.of(CommandFlag.MOVABLEKEYS, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("SORT_RO",
      EnumSet.of(CommandFlag.MOVABLEKEYS, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("ZDIFF", EnumSet.of(CommandFlag.MOVABLEKEYS, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("ZINTER", EnumSet.of(CommandFlag.MOVABLEKEYS, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("ZINTERCARD",
      EnumSet.of(CommandFlag.MOVABLEKEYS, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("ZUNION", EnumSet.of(CommandFlag.MOVABLEKEYS, CommandFlag.READONLY));

    // 3 command(s) with: movablekeys, write
    COMMAND_FLAGS_REGISTRY.put("LMPOP", EnumSet.of(CommandFlag.MOVABLEKEYS, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("MIGRATE", EnumSet.of(CommandFlag.MOVABLEKEYS, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("ZMPOP", EnumSet.of(CommandFlag.MOVABLEKEYS, CommandFlag.WRITE));

    // 1 command(s) with: noscript, stale
    COMMAND_FLAGS_REGISTRY.put("SCRIPT LOAD", EnumSet.of(CommandFlag.NOSCRIPT, CommandFlag.STALE));

    // 2 command(s) with: noscript, write
    COMMAND_FLAGS_REGISTRY.put("FUNCTION DELETE",
      EnumSet.of(CommandFlag.NOSCRIPT, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("FUNCTION FLUSH",
      EnumSet.of(CommandFlag.NOSCRIPT, CommandFlag.WRITE));

    // 1 command(s) with: admin, denyoom, write
    COMMAND_FLAGS_REGISTRY.put("PFDEBUG",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.DENYOOM, CommandFlag.WRITE));

    // 3 command(s) with: admin, loading, stale
    COMMAND_FLAGS_REGISTRY.put("SLOWLOG GET",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.LOADING, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("SLOWLOG LEN",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.LOADING, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("SLOWLOG RESET",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.LOADING, CommandFlag.STALE));

    // 5 command(s) with: admin, noscript, no_async_loading
    COMMAND_FLAGS_REGISTRY.put("BGREWRITEAOF",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.NOSCRIPT, CommandFlag.NO_ASYNC_LOADING));
    COMMAND_FLAGS_REGISTRY.put("BGSAVE",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.NOSCRIPT, CommandFlag.NO_ASYNC_LOADING));
    COMMAND_FLAGS_REGISTRY.put("MODULE LOAD",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.NOSCRIPT, CommandFlag.NO_ASYNC_LOADING));
    COMMAND_FLAGS_REGISTRY.put("MODULE LOADEX",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.NOSCRIPT, CommandFlag.NO_ASYNC_LOADING));
    COMMAND_FLAGS_REGISTRY.put("MODULE UNLOAD",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.NOSCRIPT, CommandFlag.NO_ASYNC_LOADING));

    // 2 command(s) with: admin, noscript, stale
    COMMAND_FLAGS_REGISTRY.put("CLUSTER RESET",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("FAILOVER",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.NOSCRIPT, CommandFlag.STALE));

    // 13 command(s) with: admin, no_async_loading, stale
    COMMAND_FLAGS_REGISTRY.put("CLUSTER ADDSLOTS",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.NO_ASYNC_LOADING, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLUSTER ADDSLOTSRANGE",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.NO_ASYNC_LOADING, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLUSTER BUMPEPOCH",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.NO_ASYNC_LOADING, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLUSTER DELSLOTS",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.NO_ASYNC_LOADING, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLUSTER DELSLOTSRANGE",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.NO_ASYNC_LOADING, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLUSTER FAILOVER",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.NO_ASYNC_LOADING, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLUSTER FLUSHSLOTS",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.NO_ASYNC_LOADING, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLUSTER FORGET",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.NO_ASYNC_LOADING, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLUSTER MEET",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.NO_ASYNC_LOADING, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLUSTER REPLICATE",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.NO_ASYNC_LOADING, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLUSTER SAVECONFIG",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.NO_ASYNC_LOADING, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLUSTER SET-CONFIG-EPOCH",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.NO_ASYNC_LOADING, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLUSTER SETSLOT",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.NO_ASYNC_LOADING, CommandFlag.STALE));

    // 1 command(s) with: asking, denyoom, write
    COMMAND_FLAGS_REGISTRY.put("RESTORE-ASKING",
      EnumSet.of(CommandFlag.ASKING, CommandFlag.DENYOOM, CommandFlag.WRITE));

    // 2 command(s) with: blocking, denyoom, write
    COMMAND_FLAGS_REGISTRY.put("BLMOVE",
      EnumSet.of(CommandFlag.BLOCKING, CommandFlag.DENYOOM, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("BRPOPLPUSH",
      EnumSet.of(CommandFlag.BLOCKING, CommandFlag.DENYOOM, CommandFlag.WRITE));

    // 2 command(s) with: blocking, fast, write
    COMMAND_FLAGS_REGISTRY.put("BZPOPMAX",
      EnumSet.of(CommandFlag.BLOCKING, CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("BZPOPMIN",
      EnumSet.of(CommandFlag.BLOCKING, CommandFlag.FAST, CommandFlag.WRITE));

    // 1 command(s) with: blocking, movablekeys, readonly
    COMMAND_FLAGS_REGISTRY.put("XREAD",
      EnumSet.of(CommandFlag.BLOCKING, CommandFlag.MOVABLEKEYS, CommandFlag.READONLY));

    // 3 command(s) with: blocking, movablekeys, write
    COMMAND_FLAGS_REGISTRY.put("BLMPOP",
      EnumSet.of(CommandFlag.BLOCKING, CommandFlag.MOVABLEKEYS, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("BZMPOP",
      EnumSet.of(CommandFlag.BLOCKING, CommandFlag.MOVABLEKEYS, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("XREADGROUP",
      EnumSet.of(CommandFlag.BLOCKING, CommandFlag.MOVABLEKEYS, CommandFlag.WRITE));

    // 24 command(s) with: denyoom, fast, write
    COMMAND_FLAGS_REGISTRY.put("APPEND",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("DECR",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("DECRBY",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("GETSET",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("HINCRBY",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("HINCRBYFLOAT",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("HMSET",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("HSET",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("HSETEX",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("HSETNX",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("INCR",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("INCRBY",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("INCRBYFLOAT",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("LPUSH",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("LPUSHX",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("PFADD",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("RPUSH",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("RPUSHX",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("SADD",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("SETNX",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("XADD",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("XSETID",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("ZADD",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.FAST, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("ZINCRBY",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.FAST, CommandFlag.WRITE));

    // 49 command(s) with: denyoom, module, write
    COMMAND_FLAGS_REGISTRY.put("BF.ADD",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("BF.INSERT",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("BF.LOADCHUNK",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("BF.MADD",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("BF.RESERVE",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("CF.ADD",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("CF.ADDNX",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("CF.INSERT",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("CF.INSERTNX",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("CF.LOADCHUNK",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("CF.RESERVE",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("CMS.INCRBY",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("CMS.INITBYDIM",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("CMS.INITBYPROB",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("CMS.MERGE",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("FT.ADD",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("FT.ALIASADD",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("FT.ALIASUPDATE",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("FT.ALTER",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("FT.CREATE",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("FT.DICTADD",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("FT.SUGADD",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("FT.SYNADD",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("FT.SYNUPDATE",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("FT._ALIASADDIFNX",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("FT._ALTERIFNX",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("FT._CREATEIFNX",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("JSON.ARRAPPEND",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("JSON.ARRINSERT",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("JSON.MERGE",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("JSON.MSET",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("JSON.SET",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("JSON.STRAPPEND",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("JSON.TOGGLE",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("TDIGEST.ADD",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("TDIGEST.CREATE",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("TDIGEST.MERGE",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("TDIGEST.RESET",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("TOPK.ADD",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("TOPK.INCRBY",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("TOPK.RESERVE",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("TS.ADD",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("TS.ALTER",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("TS.CREATE",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("TS.DECRBY",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("TS.INCRBY",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("TS.MADD",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("VADD",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("_FT.SAFEADD",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MODULE, CommandFlag.WRITE));

    // 6 command(s) with: denyoom, movablekeys, write
    COMMAND_FLAGS_REGISTRY.put("GEORADIUS",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MOVABLEKEYS, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("GEORADIUSBYMEMBER",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MOVABLEKEYS, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("SORT",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MOVABLEKEYS, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("ZDIFFSTORE",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MOVABLEKEYS, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("ZINTERSTORE",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MOVABLEKEYS, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("ZUNIONSTORE",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.MOVABLEKEYS, CommandFlag.WRITE));

    // 2 command(s) with: denyoom, noscript, write
    COMMAND_FLAGS_REGISTRY.put("FUNCTION LOAD",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.NOSCRIPT, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("FUNCTION RESTORE",
      EnumSet.of(CommandFlag.DENYOOM, CommandFlag.NOSCRIPT, CommandFlag.WRITE));

    // 6 command(s) with: fast, loading, stale
    COMMAND_FLAGS_REGISTRY.put("ECHO",
      EnumSet.of(CommandFlag.FAST, CommandFlag.LOADING, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("LASTSAVE",
      EnumSet.of(CommandFlag.FAST, CommandFlag.LOADING, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("READONLY",
      EnumSet.of(CommandFlag.FAST, CommandFlag.LOADING, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("READWRITE",
      EnumSet.of(CommandFlag.FAST, CommandFlag.LOADING, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("SELECT",
      EnumSet.of(CommandFlag.FAST, CommandFlag.LOADING, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("TIME",
      EnumSet.of(CommandFlag.FAST, CommandFlag.LOADING, CommandFlag.STALE));

    // 19 command(s) with: fast, module, readonly
    COMMAND_FLAGS_REGISTRY.put("BF.CARD",
      EnumSet.of(CommandFlag.FAST, CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("BF.DEBUG",
      EnumSet.of(CommandFlag.FAST, CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("BF.EXISTS",
      EnumSet.of(CommandFlag.FAST, CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("BF.INFO",
      EnumSet.of(CommandFlag.FAST, CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("BF.MEXISTS",
      EnumSet.of(CommandFlag.FAST, CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("BF.SCANDUMP",
      EnumSet.of(CommandFlag.FAST, CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("CF.COMPACT",
      EnumSet.of(CommandFlag.FAST, CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("CF.COUNT",
      EnumSet.of(CommandFlag.FAST, CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("CF.DEBUG",
      EnumSet.of(CommandFlag.FAST, CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("CF.EXISTS",
      EnumSet.of(CommandFlag.FAST, CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("CF.INFO",
      EnumSet.of(CommandFlag.FAST, CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("CF.MEXISTS",
      EnumSet.of(CommandFlag.FAST, CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("CF.SCANDUMP",
      EnumSet.of(CommandFlag.FAST, CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("VCARD",
      EnumSet.of(CommandFlag.FAST, CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("VDIM",
      EnumSet.of(CommandFlag.FAST, CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("VEMB",
      EnumSet.of(CommandFlag.FAST, CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("VGETATTR",
      EnumSet.of(CommandFlag.FAST, CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("VINFO",
      EnumSet.of(CommandFlag.FAST, CommandFlag.MODULE, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("VLINKS",
      EnumSet.of(CommandFlag.FAST, CommandFlag.MODULE, CommandFlag.READONLY));

    // 3 command(s) with: fast, module, write
    COMMAND_FLAGS_REGISTRY.put("CF.DEL",
      EnumSet.of(CommandFlag.FAST, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("TS.CREATERULE",
      EnumSet.of(CommandFlag.FAST, CommandFlag.MODULE, CommandFlag.WRITE));
    COMMAND_FLAGS_REGISTRY.put("VSETATTR",
      EnumSet.of(CommandFlag.FAST, CommandFlag.MODULE, CommandFlag.WRITE));

    // 14 command(s) with: loading, noscript, stale
    COMMAND_FLAGS_REGISTRY.put("ACL CAT",
      EnumSet.of(CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("ACL GENPASS",
      EnumSet.of(CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("ACL WHOAMI",
      EnumSet.of(CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLIENT CACHING",
      EnumSet.of(CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLIENT GETNAME",
      EnumSet.of(CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLIENT GETREDIR",
      EnumSet.of(CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLIENT ID",
      EnumSet.of(CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLIENT INFO",
      EnumSet.of(CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLIENT NO-TOUCH",
      EnumSet.of(CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLIENT REPLY",
      EnumSet.of(CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLIENT SETINFO",
      EnumSet.of(CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLIENT SETNAME",
      EnumSet.of(CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLIENT TRACKING",
      EnumSet.of(CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLIENT TRACKINGINFO",
      EnumSet.of(CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));

    // 5 command(s) with: loading, pubsub, stale
    COMMAND_FLAGS_REGISTRY.put("PUBSUB CHANNELS",
      EnumSet.of(CommandFlag.LOADING, CommandFlag.PUBSUB, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("PUBSUB NUMPAT",
      EnumSet.of(CommandFlag.LOADING, CommandFlag.PUBSUB, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("PUBSUB NUMSUB",
      EnumSet.of(CommandFlag.LOADING, CommandFlag.PUBSUB, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("PUBSUB SHARDCHANNELS",
      EnumSet.of(CommandFlag.LOADING, CommandFlag.PUBSUB, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("PUBSUB SHARDNUMSUB",
      EnumSet.of(CommandFlag.LOADING, CommandFlag.PUBSUB, CommandFlag.STALE));

    // 3 command(s) with: module, noscript, readonly
    COMMAND_FLAGS_REGISTRY.put("SEARCH.CLUSTERREFRESH",
      EnumSet.of(CommandFlag.MODULE, CommandFlag.NOSCRIPT, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("TIMESERIES.CLUSTERSET",
      EnumSet.of(CommandFlag.MODULE, CommandFlag.NOSCRIPT, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("TIMESERIES.REFRESHCLUSTER",
      EnumSet.of(CommandFlag.MODULE, CommandFlag.NOSCRIPT, CommandFlag.READONLY));

    // 27 command(s) with: admin, loading, noscript, stale
    COMMAND_FLAGS_REGISTRY.put("ACL DELUSER",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("ACL DRYRUN",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("ACL GETUSER",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("ACL LIST",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("ACL LOAD",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("ACL LOG",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("ACL SAVE",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("ACL SETUSER",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("ACL USERS",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLIENT KILL",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLIENT LIST",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLIENT NO-EVICT",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLIENT PAUSE",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLIENT UNBLOCK",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CLIENT UNPAUSE",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CONFIG GET",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CONFIG RESETSTAT",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CONFIG REWRITE",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("CONFIG SET",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("DEBUG",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("LATENCY DOCTOR",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("LATENCY GRAPH",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("LATENCY HISTOGRAM",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("LATENCY HISTORY",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("LATENCY LATEST",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("LATENCY RESET",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("MONITOR",
      EnumSet.of(CommandFlag.ADMIN, CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));

    // 3 command(s) with: admin, noscript, no_async_loading, no_multi
    COMMAND_FLAGS_REGISTRY.put("PSYNC", EnumSet.of(CommandFlag.ADMIN, CommandFlag.NOSCRIPT,
      CommandFlag.NO_ASYNC_LOADING, CommandFlag.NO_MULTI));
    COMMAND_FLAGS_REGISTRY.put("SAVE", EnumSet.of(CommandFlag.ADMIN, CommandFlag.NOSCRIPT,
      CommandFlag.NO_ASYNC_LOADING, CommandFlag.NO_MULTI));
    COMMAND_FLAGS_REGISTRY.put("SYNC", EnumSet.of(CommandFlag.ADMIN, CommandFlag.NOSCRIPT,
      CommandFlag.NO_ASYNC_LOADING, CommandFlag.NO_MULTI));

    // 2 command(s) with: admin, noscript, no_async_loading, stale
    COMMAND_FLAGS_REGISTRY.put("REPLICAOF", EnumSet.of(CommandFlag.ADMIN, CommandFlag.NOSCRIPT,
      CommandFlag.NO_ASYNC_LOADING, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("SLAVEOF", EnumSet.of(CommandFlag.ADMIN, CommandFlag.NOSCRIPT,
      CommandFlag.NO_ASYNC_LOADING, CommandFlag.STALE));

    // 1 command(s) with: fast, loading, noscript, stale
    COMMAND_FLAGS_REGISTRY.put("ROLE",
      EnumSet.of(CommandFlag.FAST, CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));

    // 2 command(s) with: fast, loading, pubsub, stale
    COMMAND_FLAGS_REGISTRY.put("PUBLISH",
      EnumSet.of(CommandFlag.FAST, CommandFlag.LOADING, CommandFlag.PUBSUB, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("SPUBLISH",
      EnumSet.of(CommandFlag.FAST, CommandFlag.LOADING, CommandFlag.PUBSUB, CommandFlag.STALE));

    // 2 command(s) with: loading, module, noscript, readonly
    COMMAND_FLAGS_REGISTRY.put("SEARCH.CLUSTERINFO", EnumSet.of(CommandFlag.LOADING,
      CommandFlag.MODULE, CommandFlag.NOSCRIPT, CommandFlag.READONLY));
    COMMAND_FLAGS_REGISTRY.put("SEARCH.CLUSTERSET", EnumSet.of(CommandFlag.LOADING,
      CommandFlag.MODULE, CommandFlag.NOSCRIPT, CommandFlag.READONLY));

    // 6 command(s) with: loading, noscript, pubsub, stale
    COMMAND_FLAGS_REGISTRY.put("PSUBSCRIBE",
      EnumSet.of(CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.PUBSUB, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("PUNSUBSCRIBE",
      EnumSet.of(CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.PUBSUB, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("SSUBSCRIBE",
      EnumSet.of(CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.PUBSUB, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("SUBSCRIBE",
      EnumSet.of(CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.PUBSUB, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("SUNSUBSCRIBE",
      EnumSet.of(CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.PUBSUB, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("UNSUBSCRIBE",
      EnumSet.of(CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.PUBSUB, CommandFlag.STALE));

    // 1 command(s) with: loading, noscript, skip_slowlog, stale
    COMMAND_FLAGS_REGISTRY.put("EXEC", EnumSet.of(CommandFlag.LOADING, CommandFlag.NOSCRIPT,
      CommandFlag.SKIP_SLOWLOG, CommandFlag.STALE));

    // 1 command(s) with: admin, allow_busy, loading, noscript, stale
    COMMAND_FLAGS_REGISTRY.put("REPLCONF", EnumSet.of(CommandFlag.ADMIN, CommandFlag.ALLOW_BUSY,
      CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));

    // 4 command(s) with: allow_busy, fast, loading, noscript, stale
    COMMAND_FLAGS_REGISTRY.put("DISCARD", EnumSet.of(CommandFlag.ALLOW_BUSY, CommandFlag.FAST,
      CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("MULTI", EnumSet.of(CommandFlag.ALLOW_BUSY, CommandFlag.FAST,
      CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("UNWATCH", EnumSet.of(CommandFlag.ALLOW_BUSY, CommandFlag.FAST,
      CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("WATCH", EnumSet.of(CommandFlag.ALLOW_BUSY, CommandFlag.FAST,
      CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.STALE));

    // 3 command(s) with: movablekeys, noscript, no_mandatory_keys, skip_monitor, stale
    COMMAND_FLAGS_REGISTRY.put("EVAL", EnumSet.of(CommandFlag.MOVABLEKEYS, CommandFlag.NOSCRIPT,
      CommandFlag.NO_MANDATORY_KEYS, CommandFlag.SKIP_MONITOR, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("EVALSHA", EnumSet.of(CommandFlag.MOVABLEKEYS, CommandFlag.NOSCRIPT,
      CommandFlag.NO_MANDATORY_KEYS, CommandFlag.SKIP_MONITOR, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("FCALL", EnumSet.of(CommandFlag.MOVABLEKEYS, CommandFlag.NOSCRIPT,
      CommandFlag.NO_MANDATORY_KEYS, CommandFlag.SKIP_MONITOR, CommandFlag.STALE));

    // 1 command(s) with: admin, allow_busy, loading, noscript, no_multi, stale
    COMMAND_FLAGS_REGISTRY.put("SHUTDOWN", EnumSet.of(CommandFlag.ADMIN, CommandFlag.ALLOW_BUSY,
      CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.NO_MULTI, CommandFlag.STALE));

    // 4 command(s) with: allow_busy, fast, loading, noscript, no_auth, stale
    COMMAND_FLAGS_REGISTRY.put("AUTH", EnumSet.of(CommandFlag.ALLOW_BUSY, CommandFlag.FAST,
      CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.NO_AUTH, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("HELLO", EnumSet.of(CommandFlag.ALLOW_BUSY, CommandFlag.FAST,
      CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.NO_AUTH, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("QUIT", EnumSet.of(CommandFlag.ALLOW_BUSY, CommandFlag.FAST,
      CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.NO_AUTH, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("RESET", EnumSet.of(CommandFlag.ALLOW_BUSY, CommandFlag.FAST,
      CommandFlag.LOADING, CommandFlag.NOSCRIPT, CommandFlag.NO_AUTH, CommandFlag.STALE));

    // 3 command(s) with: movablekeys, noscript, no_mandatory_keys, readonly, skip_monitor, stale
    COMMAND_FLAGS_REGISTRY.put("EVALSHA_RO",
      EnumSet.of(CommandFlag.MOVABLEKEYS, CommandFlag.NOSCRIPT, CommandFlag.NO_MANDATORY_KEYS,
        CommandFlag.READONLY, CommandFlag.SKIP_MONITOR, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("EVAL_RO",
      EnumSet.of(CommandFlag.MOVABLEKEYS, CommandFlag.NOSCRIPT, CommandFlag.NO_MANDATORY_KEYS,
        CommandFlag.READONLY, CommandFlag.SKIP_MONITOR, CommandFlag.STALE));
    COMMAND_FLAGS_REGISTRY.put("FCALL_RO",
      EnumSet.of(CommandFlag.MOVABLEKEYS, CommandFlag.NOSCRIPT, CommandFlag.NO_MANDATORY_KEYS,
        CommandFlag.READONLY, CommandFlag.SKIP_MONITOR, CommandFlag.STALE));

  }

  /**
   * Get the flags for a given command. Flags are looked up from a static registry based on the
   * command name. This approach significantly reduces memory usage by sharing flag instances across
   * all CommandObject instances.
   * @param cmd the protocol command
   * @return EnumSet of CommandFlag for this command, or empty set if command has no flags
   */
  @Override
  public EnumSet<CommandFlag> getFlags(ProtocolCommand cmd) {
    byte[] raw = cmd.getRaw();
    String commandName = SafeEncoder.encode(raw).toUpperCase();
    return COMMAND_FLAGS_REGISTRY.getOrDefault(commandName, EMPTY_FLAGS);
  }
}
